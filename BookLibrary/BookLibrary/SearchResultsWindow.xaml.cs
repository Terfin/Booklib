using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using BookLibLogics;
using BookLibServices;
using System.Data;

namespace BookLibrary
{
    /// <summary>
    /// Interaction logic for SearchResultsWindow.xaml
    /// </summary>
    public partial class SearchResultsWindow : UserControl
    {
        internal DataTable table = new DataTable();
        private DynamicData dyn = DynamicData.Instance;
        internal event EventHandler EditActionInvoked;
        public SearchResultsWindow()
        {
            InitializeComponent();
            table.Columns.Add("ISBN");
            table.Columns.Add("Name");
            table.Columns.Add("Author");
            table.Columns.Add("Subtype");
            table.Columns.Add("Category");
            table.Columns.Add("Publish Date");
            table.Columns.Add("Location");
            table.Columns.Add("Copies");
            table.Columns.Add("Edition");
            resultsGrid.DataContext = table;
            dyn.onSearchComplete += searchComplete;
        }

        private void resultsGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            addCustomColumn("Edit");
            addCustomColumn("Delete");
        }

        private void addCustomColumn(string columnName)
        {
            DataGridTemplateColumn dt = new DataGridTemplateColumn();
            dt.Header = columnName;
            FrameworkElementFactory editButton = new FrameworkElementFactory(typeof(Button), string.Format("{0}Button", columnName.ToLower()));
            editButton.SetValue(Button.ContentProperty, columnName);
            editButton.SetValue(Button.NameProperty, string.Format("{0}Button", columnName.ToLower()));
            editButton.AddHandler(Button.ClickEvent, new RoutedEventHandler(delete_Click));
            DataTemplate cellTemplate = new DataTemplate();
            cellTemplate.VisualTree = editButton;
            dt.CellTemplate = cellTemplate;
            resultsGrid.Columns.Add(dt);
        }

        private void delete_Click(object sender, RoutedEventArgs e)
        {
            DataRowView datarv = ((FrameworkElement)sender).DataContext as DataRowView;
            DataRow dr = datarv.Row;
            if (((Button)sender).Name.Contains("edit"))
            {
                //try 
                //{	        
                    if (EditActionInvoked != null)
	                {
                        EditActionInvoked(dyn.GetItemFromDataRow(dr), new EventArgs());
	                }
                //}
                //catch (Exception)
                //{
                //    System.Windows.Forms.MessageBox.Show("Cannot load edit screen! Please report this bug!");
                //}
                
                
            }
            else if (((Button)sender).Name.Contains("delete"))
            {
                MessageBoxResult result = MessageBox.Show("Are you sure you want to delete this item?", "Item Deletion", MessageBoxButton.YesNo,MessageBoxImage.Exclamation);
                if (result == MessageBoxResult.Yes)
                {
                    dyn.RemoveItem(dr);
                    table.Rows.Remove(dr);
                }
            }
        }

        public void searchComplete(List<AbstractItem> items)
        {
            table.Rows.Clear();
            if (items != null)
            {
                foreach (AbstractItem item in items)
                {
                    DataRow row = table.NewRow();
                    if (item.GetType() == typeof(ChildrenBook))
                    {
                        ChildrenBook book = item as ChildrenBook;
                        generateRowFromItem(book, row);
                        object[] refCat = typeof(ChildrenBook.Categories).GetField(book.Category.ToString()).GetCustomAttributes(typeof(NameAttr), false);
                        row["Category"] = refCat.Length > 0 ? ((NameAttr)refCat[0]).Desc : book.Category.ToString();
                    }
                    if (item.GetType() == typeof(RegularBook))
                    {
                        RegularBook book = item as RegularBook;
                        generateRowFromItem(book, row);
                        object[] refCat = typeof(RegularBook.Categories).GetField(book.Category.ToString()).GetCustomAttributes(typeof(NameAttr), false);
                        row["Category"] = refCat.Length > 0 ? ((NameAttr)refCat[0]).Desc : book.Category.ToString();
                    }
                    if (item.GetType() == typeof(StudyBook))
                    {
                        StudyBook book = item as StudyBook;
                        generateRowFromItem(book, row);
                        object[] refCat = typeof(StudyBook.Categories).GetField(book.Category.ToString()).GetCustomAttributes(typeof(NameAttr), false);
                        row["Category"] = refCat.Length > 0 ? ((NameAttr)refCat[0]).Desc : book.Category.ToString();
                    }
                    if (item.GetType() == typeof(RegularJournal))
                    {
                        RegularJournal journal = item as RegularJournal;
                        generateRowFromItem(journal, row);
                        object[] refCat = typeof(RegularJournal.Categories).GetField(journal.Category.ToString()).GetCustomAttributes(typeof(NameAttr), false);
                        row["Category"] = refCat.Length > 0 ? ((NameAttr)refCat[0]).Desc : journal.Category.ToString();
                    }
                    if (item.GetType() == typeof(ScienceJournal))
                    {
                        ScienceJournal journal = item as ScienceJournal;
                        generateRowFromItem(journal, row);
                        object[] refCat = typeof(ScienceJournal.Categories).GetField(journal.Category.ToString()).GetCustomAttributes(typeof(NameAttr), false);
                        row["Category"] = refCat.Length > 0 ? ((NameAttr)refCat[0]).Desc : journal.Category.ToString();
                    }
                    table.Rows.Add(row);
                }
            }
        }

        private void generateRowFromItem(AbstractItem item, DataRow row)
        {
            row["ISBN"] = item.ISBN.Number;
            row["Name"] = item.Name;
            row["Author"] = item.Author;
            row["Subtype"] = ((NameAttr)item.GetType().GetCustomAttributes(typeof(NameAttr), false)[0]).Desc;
            row["Publish Date"] = item.PrintDate;
            row["Location"] = item.Location;
            row["Edition"] = item.Edition;
            List<AbstractItem> itemCopies = SearchHelper.searchByISBN(item.ISBN.Number);
            row["Copies"] = itemCopies.Count;
        }
    }
}
